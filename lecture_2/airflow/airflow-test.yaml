---
#
# Source: airflow/templates/airflow-config.yaml
# https://airflow.apache.org/docs/apache-airflow/2.3.2/configurations-ref.html
apiVersion: v1
kind: ConfigMap
metadata:
  name: airflow-config
data:
  AIRFLOW__CORE__DEFAULT_TIMEZONE: "Asia/Seoul"
  AIRFLOW__CORE__DAGS_FOLDER: "/dags"
  AIRFLOW__WEBSERVER__DEFAULT_UI_TIMEZONE: "Asia/Seoul"
  AIRFLOW__WEBSERVER__SECRET_KEY: "0hyeon"
  AIRFLOW__SCHEDULER__DAG_DIR_LIST_INTERVAL: "30"
  AIRFLOW__LOGGING__BASE_LOG_FOLDER: "/logs"
  AIRFLOW__LOGGING__DAG_PROCESSOR_MANAGER_LOG_LOCATION: "/logs/dag_processor_manager/dag_processor_manager.log"
  AIRFLOW__KUBERNETES__WORKER_CONTAINER_REPOSITORY: "apache/airflow"
  AIRFLOW__KUBERNETES__WORKER_CONTAINER_TAG: "2.3.2"
  AIRFLOW__KUBERNETES__POD_TEMPLATE_FILE: "/airflow-pod.yaml"
  AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: "postgresql://airflow:airflow@airflow-postgres:5432/airflow"

---
# Source: airflow/templates/airflow-templates.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: airflow-templates
  labels:
    app.kubernetes.io/instance: airflow
    app.kubernetes.io/name: airflow
data:
  airflow-pod.yaml: |
    apiVersion: v1
    kind: Pod
    metadata: dummy
    spec:
      restartPolicy: Never
      containers:
        - name: base
          envFrom:
            - configMapRef:
                name: airflow-config
          env:
            - name: AIRFLOW__CORE__EXECUTOR
              value: LocalExecutor
          image: apache/airflow:2.3.2
          imagePullPolicy: IfNotPresent
          volumeMounts:
            - name: airflow-pvc
              mountPath: /dags
              subPath: airflow/airflow/dags
            - name: airflow-pvc
              mountPath: /logs
              subPath: airflow/airflow/logs
            - name: airflow-templates
              mountPath: /airflow-pod.yaml
              subPath: airflow-pod.yaml
      volumes:
        - name: airflow-pvc
          persistentVolumeClaim:
            claimName: nfs-pvc
        - name: airflow-templates
          configMap:
            name: airflow-templates
            items:
              - key: airflow-pod.yaml
                path: airflow-pod.yaml
                mode: 0777

  airflow-web-config-template.py: |
    # https://github.com/apache/airflow/blob/2.3.2/airflow/config_templates/default_webserver_config.py
    #
    # Licensed to the Apache Software Foundation (ASF) under one
    # or more contributor license agreements.  See the NOTICE file
    # distributed with this work for additional information
    # regarding copyright ownership.  The ASF licenses this file
    # to you under the Apache License, Version 2.0 (the
    # "License"); you may not use this file except in compliance
    # with the License.  You may obtain a copy of the License at
    #
    #   http://www.apache.org/licenses/LICENSE-2.0
    #
    # Unless required by applicable law or agreed to in writing,
    # software distributed under the License is distributed on an
    # "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    # KIND, either express or implied.  See the License for the
    # specific language governing permissions and limitations
    # under the License.
    """Default configuration for the Airflow webserver"""
    import os

    from airflow.www.fab_security.manager import AUTH_DB

    # from airflow.www.fab_security.manager import AUTH_LDAP
    # from airflow.www.fab_security.manager import AUTH_OAUTH
    # from airflow.www.fab_security.manager import AUTH_OID
    # from airflow.www.fab_security.manager import AUTH_REMOTE_USER


    basedir = os.path.abspath(os.path.dirname(__file__))

    # Flask-WTF flag for CSRF
    WTF_CSRF_ENABLED = True

    # ----------------------------------------------------
    # AUTHENTICATION CONFIG
    # ----------------------------------------------------
    # For details on how to set up each of the following authentication, see
    # http://flask-appbuilder.readthedocs.io/en/latest/security.html# authentication-methods
    # for details.

    # The authentication type
    # AUTH_OID : Is for OpenID
    # AUTH_DB : Is for database
    # AUTH_LDAP : Is for LDAP
    # AUTH_REMOTE_USER : Is for using REMOTE_USER from web server
    # AUTH_OAUTH : Is for OAuth
    AUTH_TYPE = AUTH_DB

    # Uncomment to setup Full admin role name
    AUTH_ROLE_ADMIN = 'Admin'

    # Uncomment and set to desired role to enable access without authentication
    # AUTH_ROLE_PUBLIC = 'Viewer'

    # Will allow user self registration
    AUTH_USER_REGISTRATION = True

    # The recaptcha it's automatically enabled for user self registration is active and the keys are necessary
    # RECAPTCHA_PRIVATE_KEY = PRIVATE_KEY
    # RECAPTCHA_PUBLIC_KEY = PUBLIC_KEY

    # Config for Flask-Mail necessary for user self registration
    # MAIL_SERVER = 'smtp.gmail.com'
    # MAIL_USE_TLS = True
    # MAIL_USERNAME = 'yourappemail@gmail.com'
    # MAIL_PASSWORD = 'passwordformail'
    # MAIL_DEFAULT_SENDER = 'sender@gmail.com'

    # The default user self registration role
    AUTH_USER_REGISTRATION_ROLE = "Admin"

    # When using OAuth Auth, uncomment to setup provider(s) info
    # Google OAuth example:
    # OAUTH_PROVIDERS = [{
    #   'name':'google',
    #     'token_key':'access_token',
    #     'icon':'fa-google',
    #         'remote_app': {
    #             'api_base_url':'https://www.googleapis.com/oauth2/v2/',
    #             'client_kwargs':{
    #                 'scope': 'email profile'
    #             },
    #             'access_token_url':'https://accounts.google.com/o/oauth2/token',
    #             'authorize_url':'https://accounts.google.com/o/oauth2/auth',
    #             'request_token_url': None,
    #             'client_id': GOOGLE_KEY,
    #             'client_secret': GOOGLE_SECRET_KEY,
    #         }
    # }]

    # When using LDAP Auth, setup the ldap server
    # AUTH_LDAP_SERVER = "ldap://ldapserver.new"

    # When using OpenID Auth, uncomment to setup OpenID providers.
    # example for OpenID authentication
    # OPENID_PROVIDERS = [
    #    { 'name': 'Yahoo', 'url': 'https://me.yahoo.com' },
    #    { 'name': 'AOL', 'url': 'http://openid.aol.com/<username>' },
    #    { 'name': 'Flickr', 'url': 'http://www.flickr.com/<username>' },
    #    { 'name': 'MyOpenID', 'url': 'https://www.myopenid.com' }]

    # ----------------------------------------------------
    # Theme CONFIG
    # ----------------------------------------------------
    # Flask App Builder comes up with a number of predefined themes
    # that you can use for Apache Airflow.
    # http://flask-appbuilder.readthedocs.io/en/latest/customizing.html#changing-themes
    # Please make sure to remove "navbar_color" configuration from airflow.cfg
    # in order to fully utilize the theme. (or use that property in conjunction with theme)
    # APP_THEME = "bootstrap-theme.css"  # default bootstrap
    # APP_THEME = "amelia.css"
    # APP_THEME = "cerulean.css"
    # APP_THEME = "cosmo.css"
    # APP_THEME = "cyborg.css"
    # APP_THEME = "darkly.css"
    # APP_THEME = "flatly.css"
    # APP_THEME = "journal.css"
    # APP_THEME = "lumen.css"
    # APP_THEME = "paper.css"
    # APP_THEME = "readable.css"
    # APP_THEME = "sandstone.css"
    # APP_THEME = "simplex.css"
    # APP_THEME = "slate.css"
    # APP_THEME = "solar.css"
    # APP_THEME = "spacelab.css"
    # APP_THEME = "superhero.css"
    # APP_THEME = "united.css"
    # APP_THEME = "yeti.css"
---
# Source: airflow/templates/airflow-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: airflow
spec:
  type: LoadBalancer
  selector:
    deploy: airflow-web
  ports:
    - port: 8080
      protocol: TCP
      targetPort: 8080
---
# Source: airflow/templates/airflow-deployment.yaml
# Airflow 웹서버 (Webserver)
kind: StatefulSet
apiVersion: apps/v1
metadata:
  name: airflow-web
spec:
  serviceName: airflow
  replicas: 1
  selector:
    matchLabels:
      deploy: airflow-web
  template:
    metadata:
      labels:
        deploy: airflow-web
    spec:
      containers:
        - name: airflow-web
          # image: apache/airflow:2.3.2
          image: 0hyeon/hyeon-airflow-image:latest
          imagePullPolicy: Always
          ports:
            - containerPort: 8080
          envFrom:
            - configMapRef:
                name: airflow-config
          env:
            - name: AIRFLOW__CORE__EXECUTOR
              value: "KubernetesExecutor"
          volumeMounts:
            - name: airflow-pvc
              mountPath: /dags
              subPath: airflow/airflow/dags
            - name: airflow-pvc
              mountPath: /logs
              subPath: airflow/airflow/logs
            - name: airflow-templates
              mountPath: /opt/airflow/webserver_config.py
              subPath: airflow-web-config-template.py
            - name: nfs-env-volume # ✅ NFS 볼륨 추가
              mountPath: /mnt/nts
          command: ["/bin/bash", "-c"]
          args:
            - python -m pip install --no-cache-dir pandas boto3 requests pyarrow confluent-kafka apache-airflow-providers-cncf-kubernetes &&
              export $(grep -v '^#' /mnt/nts/.env | xargs) && airflow webserver;

      restartPolicy: Always
      volumes:
        - name: airflow-pvc
          persistentVolumeClaim:
            claimName: nfs-pvc
        - name: airflow-templates
          configMap:
            name: airflow-templates
            items:
              - key: airflow-web-config-template.py
                path: airflow-web-config-template.py
        - name: nfs-env-volume # ✅ NFS 볼륨 추가
          persistentVolumeClaim:
            claimName: nfs-pvc

---
# Source: airflow/templates/airflow-deployment.yaml
# Airflow 스케줄러 (Scheduler)
kind: StatefulSet
apiVersion: apps/v1
metadata:
  name: airflow-scheduler
spec:
  serviceName: airflow
  replicas: 1
  selector:
    matchLabels:
      deploy: airflow-scheduler
  template:
    metadata:
      labels:
        deploy: airflow-scheduler
    spec:
      containers:
        - name: airflow-scheduler
          # image: apache/airflow:2.3.2
          image: 0hyeon/hyeon-airflow-image:latest
          imagePullPolicy: Always
          envFrom:
            - configMapRef:
                name: airflow-config
          volumeMounts:
            - name: airflow-pvc
              mountPath: /dags
              subPath: airflow/airflow/dags
            - name: airflow-pvc
              mountPath: /logs
              subPath: airflow/airflow/logs
            - name: airflow-templates
              mountPath: /airflow-pod.yaml
              subPath: airflow-pod.yaml
            - name: nfs-env-volume
              mountPath: /mnt/nts
          command: ["/bin/bash", "-c"]
          args:
            - python -m pip install --no-cache-dir pandas boto3 requests pyarrow confluent-kafka apache-airflow-providers-cncf-kubernetes &&
              export $(grep -v '^#' /mnt/nts/.env | xargs) && airflow scheduler;

      restartPolicy: Always
      volumes:
        - name: airflow-pvc
          persistentVolumeClaim:
            claimName: nfs-pvc
        - name: airflow-templates
          configMap:
            name: airflow-templates
            items:
              - key: airflow-pod.yaml
                path: airflow-pod.yaml
                mode: 0777
        - name: nfs-env-volume # 📌 NFS 볼륨 추가
          persistentVolumeClaim:
            claimName: nfs-pvc
