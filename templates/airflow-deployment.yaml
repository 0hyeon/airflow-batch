---
kind: StatefulSet
apiVersion: apps/v1
metadata:
  name: airflow-{{ .Values.appName }}-web
  labels:
    app.kubernetes.io/instance: airflow-{{ .Values.appName }}
    app.kubernetes.io/name: airflow-{{ .Values.appName }}
spec:
  serviceName: airflow-{{ .Values.appName }}
  replicas: {{ .Values.webReplicas }}
  selector:
    matchLabels:
      deploy: airflow-{{ .Values.appName }}-web
  template:
    metadata:
      labels:
        deploy: airflow-{{ .Values.appName }}-web
    spec:
      securityContext:
        runAsUser: 0
        runAsGroup: 0
        fsGroup: 0      
      containers:
        - name: airflow-web
          image: {{ .Values.airflow.image }}:{{ .Values.airflow.imageTag }}
          imagePullPolicy: {{ .Values.airflow.imagePullPolicy }}
          ports:
            - containerPort: {{ .Values.airflow.port }}
          env:
            - name: AIRFLOW__CORE__EXECUTOR
              value: {{ .Values.config.executor | quote }}
            - name: AIRFLOW__DATABASE__SQL_ALCHEMY_CONN
              value: "postgresql+psycopg2://airflow:{{ .Values.postgresql.password }}@airflow-postgres:5432/airflow-{{ .Values.appName }}"
            - name: AIRFLOW__DATABASE__SQL_ALCHEMY_POOL_PRE_PING
              value: "true"
          envFrom:
            - configMapRef:
                name: airflow-{{ .Values.appName }}-config
          volumeMounts:
            - name: airflow-pvc
              mountPath: /dags
              subPath: airflow/airflow-{{ .Values.appName }}/dags
            - name: airflow-pvc
              mountPath: /logs
              subPath: airflow/airflow-{{ .Values.appName }}/logs
            - name: airflow-pvc
              mountPath: /opt/airflow/data
              subPath: airflow/airflow-{{ .Values.appName }}/data
            - name: airflow-pvc
              mountPath: /data
              subPath: airflow/airflow-{{ .Values.appName }}/data
            - name: airflow-templates
              mountPath: /opt/airflow/webserver_config.py
              subPath: airflow-web-config-template.py
          command: ["airflow"]
          args: ["webserver", "--port", "{{ .Values.airflow.port }}"]
      restartPolicy: Always
      volumes:
        - name: airflow-pvc
          persistentVolumeClaim:
            claimName: nfs-pvc
        - name: airflow-templates
          configMap:
            name: airflow-{{ .Values.appName }}-templates
            items:
              - key: airflow-web-config-template.py
                path: airflow-web-config-template.py
---
kind: StatefulSet
apiVersion: apps/v1
metadata:
  name: airflow-{{ .Values.appName }}-scheduler
  labels:
    app.kubernetes.io/instance: airflow-{{ .Values.appName }}
    app.kubernetes.io/name: airflow-{{ .Values.appName }}
spec:
  serviceName: airflow-{{ .Values.appName }}
  replicas: 1
  selector:
    matchLabels:
      deploy: airflow-{{ .Values.appName }}-scheduler
  template:
    metadata:
      labels:
        deploy: airflow-{{ .Values.appName }}-scheduler
    spec:
      securityContext:
        runAsUser: 0
        runAsGroup: 0
        fsGroup: 0
      initContainers:
        - name: init-db
          image: {{ .Values.airflow.image }}:{{ .Values.airflow.imageTag }}
          imagePullPolicy: {{ .Values.airflow.imagePullPolicy }}
          env:
            - name: PGPASSWORD
              value: "{{ .Values.postgresql.password | default "airflow" }}"
            - name: AIRFLOW__DATABASE__SQL_ALCHEMY_CONN
              value: "postgresql+psycopg2://airflow:{{ .Values.postgresql.password | default "airflow" }}@airflow-postgres:5432/airflow-{{ .Values.appName }}"
            - name: AIRFLOW__DATABASE__SQL_ALCHEMY_POOL_PRE_PING
              value: "true"
          command: ["/bin/bash","-c"]
          args:
            - |
              set -e

              # 1) Postgres 서버가 응답할 때까지 대기 (postgres DB 기준)
              until psql -h airflow-postgres -p 5432 -U airflow -d postgres -c '\q' >/dev/null 2>&1; do
                echo "Waiting for Postgres (postgres db)..."; sleep 3;
              done

              # 2) 대상 메타데이터 DB가 없으면 생성 (airflow-{{ .Values.appName }})
              psql -h airflow-postgres -U airflow -d postgres -tc \
                "SELECT 1 FROM pg_database WHERE datname='airflow-{{ .Values.appName }}'" | grep -q 1 \
                || psql -h airflow-postgres -U airflow -d postgres -c 'CREATE DATABASE "airflow-{{ .Values.appName }}"'

              # 3) 이제 '대상 DB' 자체가 응답할 때까지 대기
              until psql -h airflow-postgres -p 5432 -U airflow -d "airflow-{{ .Values.appName }}" -c '\q' >/dev/null 2>&1; do
                echo "Waiting for target DB (airflow-{{ .Values.appName }})..."; sleep 3;
              done

              # 4) Airflow 메타데이터 초기화/업그레이드 (대상 DB로)
              export AIRFLOW__DATABASE__SQL_ALCHEMY_CONN="postgresql+psycopg2://airflow:{{ .Values.postgresql.password | default "airflow" }}@airflow-postgres:5432/airflow-{{ .Values.appName }}"
              airflow db init || true
              airflow db upgrade

          volumeMounts:
            - name: airflow-pvc
              mountPath: /airflow
              subPath: airflow/airflow-{{ .Values.appName }}
      containers:
        - name: airflow-scheduler
          image: {{ .Values.airflow.image }}:{{ .Values.airflow.imageTag }}
          imagePullPolicy: {{ .Values.airflow.imagePullPolicy }}
          env:
            - name: AIRFLOW__CORE__EXECUTOR
              value: {{ .Values.config.executor | quote }}
            - name: AIRFLOW__DATABASE__SQL_ALCHEMY_CONN
              value: "postgresql+psycopg2://airflow:{{ .Values.postgresql.password }}@airflow-postgres:5432/airflow-{{ .Values.appName }}"
            - name: AIRFLOW__DATABASE__SQL_ALCHEMY_POOL_PRE_PING
              value: "true"
          envFrom:
            - configMapRef:
                name: airflow-{{ .Values.appName }}-config
          volumeMounts:
            - name: airflow-pvc
              mountPath: /dags
              subPath: airflow/airflow-{{ .Values.appName }}/dags
            - name: airflow-pvc
              mountPath: /logs
              subPath: airflow/airflow-{{ .Values.appName }}/logs
            - name: airflow-pvc
              mountPath: /opt/airflow/data
              subPath: airflow/airflow-{{ .Values.appName }}/data
            - name: airflow-pvc
              mountPath: /data
              subPath: airflow/airflow-{{ .Values.appName }}/data
            - name: airflow-templates
              mountPath: /airflow-pod.yaml
              subPath: airflow-pod.yaml
          command: ["airflow"]
          args: ["scheduler"]
      restartPolicy: Always
      volumes:
        - name: airflow-pvc
          persistentVolumeClaim:
            claimName: nfs-pvc
        - name: airflow-templates
          configMap:
            name: airflow-{{ .Values.appName }}-templates
            items:
              - key: airflow-pod.yaml
                path: airflow-pod.yaml
                mode: 0777